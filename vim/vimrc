" General Options {{{
syntax on
set encoding=utf-8
set fileformat=unix
set showcmd
set laststatus=0 ruler
set foldlevel=99
set nowrap " wrapping is ugly

" colourschemes
" light: https://www.vim.org/scripts/download_script.php?src_id=10153
" colorscheme summerfruit256
" dark: https://raw.githubusercontent.com/tomasr/molokai/master/colors/molokai.vim
colorscheme molokai

" add some space below/above the cursor when scrolling
set scrolloff=2

" use vim defaults because its not 1960 any more
set nocompatible

" backspace over all the things
set bs=indent,eol,start

" don't redraw while doing macros (super speedy bois)
set lazyredraw


" highight a badly spelt word red
highlight clear SpellBad
highlight SpellBad ctermbg=Red 
highlight SpellCap ctermbg=DarkGrey

" highlighting for folds
highlight clear Folded
highlight Folded guifg=Black

" highlight .md files
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" indentation settings
set autoindent " keep the current level of indentation when you go to a newline, e.g. with o
set smarttab " back space over tab boundaries i.e. <tab><bs> will leave you where you started

" global language settings
filetype on
set softtabstop=2 tabstop=2 shiftwidth=2 expandtab " global s
set spellfile=~/.vim/spell/en.utf-8.add

" language specific settings

autocmd Filetype c,cpp setlocal cin fdm=syntax
autocmd Filetype python setlocal ts=4 sw=4 sts=0 si fdm=indent 
       \ cinwords=if,elif,else,for,while,try,except,finally,def,class,with
autocmd Filetype java setlocal ts=4 sw=4 sts=0 cin fdm=syntax
autocmd Filetype rust setlocal ts=4 sw=4 sts=0 cin fdm=syntax
autocmd Filetype asm setlocal ts=4 sw=4 sts=0 ft=nasm
autocmd FileType bib setlocal ts=6 sw=6 sts=0
autocmd FileType markdown setlocal ts=4 sw=4 sts=0 noai spell
autocmd FileType rmd,plaintex,mail setlocal spell
autocmd FileType make setlocal noet
autocmd FileType email setlocal tw=72

" search settings
set incsearch  " start searching as you type
set ignorecase " case insensitive searching
set smartcase  " become case sensitive if a capital is used

" splitting pane defaults
set splitbelow splitright

" }}}

" Keyboard Shortcuts and remaps {{{
" remapping arrow keys and pageup/down
" normal mode
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <PageUp> <Nop>
nnoremap <PageDown> <Nop>

" insert mode
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <PageUp> <Nop>
inoremap <PageDown> <Nop>

" visual mode
vnoremap <Up> <Nop>
vnoremap <Down> <Nop>
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>
vnoremap <PageUp> <Nop>
vnoremap <PageDown> <Nop>

"map F1 to escape
nnoremap <F1> <Esc>
inoremap <F1> <Esc>
vnoremap <F1> <Esc>

" fold and unfold with space
nnoremap <space> za

" add and remove words to the spelling dictionary
" add word
nnoremap <leader>g zg
" remove word
nnoremap <leader>b zw

" switch tabs
" next
nnoremap = :tabn<CR>
nnoremap L :tabn<CR>
" previous
nnoremap - :tabp<CR> 
nnoremap H :tabp<CR> 

" Copy text to the clipboard directly
vmap <C-c> "+yi
vmap <C-x> "+c
" Paste text from the clipboard directly
vmap <C-v> <ESC>"+p
imap <C-v> <ESC>"+pa

" random leader commands
nnoremap <leader>n /<++><CR>ca<
nnoremap <leader>t :!st&disown<CR><CR>

" awesome line to toggle highlighting after a search but only until the next
" one so each consecutive search will be highlighted but only the current
" search can be toggled
nnoremap <silent><expr> <Leader>h (&hls && v:hlsearch ? ':nohls' : ':set hls')."\n"

" shortcut automatically making a PDF in each of RMarkdown, Markdown
autocmd FileType tex nnoremap <leader>p :!latexrun %<CR>
autocmd FileType markdown map <leader>p :!pandoc % -s -o "%:r".pdf<CR>
autocmd FileType rmd map <leader>p :!echo<space>"rmarkdown::render('<c-r>%')"<space>\|<space>R<space>--vanilla<CR>
autocmd FileType rnd,markdown,tex nnoremap <leader>v :!zathura "%:r".pdf & disown<CR><CR>

" }}}

" Behaviour Settings {{{
" Allow persistent undo 
set undolevels=10000
set undodir=/tmp/tritoke/vim_undo
set undofile

" Jump to last location when file is opened
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" }}}
